import {
  __commonJS
} from "./chunk-G3PMV62Z.js";

// node_modules/vanta/dist/vanta.fog.min.js
var require_vanta_fog_min = __commonJS({
  "node_modules/vanta/dist/vanta.fog.min.js"(exports, module) {
    !function(e, t) {
      "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports._vantaEffect = t() : e._vantaEffect = t();
    }("undefined" != typeof self ? self : exports, () => (() => {
      "use strict";
      var e = { d: (t2, i2) => {
        for (var o2 in i2) e.o(i2, o2) && !e.o(t2, o2) && Object.defineProperty(t2, o2, { enumerable: true, get: i2[o2] });
      }, o: (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2), r: (e2) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
      } }, t = {};
      e.r(t), e.d(t, { default: () => u }), Number.prototype.clamp = function(e2, t2) {
        return Math.min(Math.max(this, e2), t2);
      };
      function i(e2) {
        for (; e2.children && e2.children.length > 0; ) i(e2.children[0]), e2.remove(e2.children[0]);
        e2.geometry && e2.geometry.dispose(), e2.material && (Object.keys(e2.material).forEach((t2) => {
          e2.material[t2] && null !== e2.material[t2] && "function" == typeof e2.material[t2].dispose && e2.material[t2].dispose();
        }), e2.material.dispose());
      }
      const o = "object" == typeof window;
      let s = o && window.THREE || {};
      o && !window.VANTA && (window.VANTA = {});
      const n = o && window.VANTA || {};
      n.register = (e2, t2) => n[e2] = (e3) => new t2(e3), n.version = "0.5.24";
      const r = function() {
        return Array.prototype.unshift.call(arguments, "[VANTA]"), console.error.apply(this, arguments);
      };
      n.VantaBase = class {
        constructor(e2 = {}) {
          if (!o) return false;
          n.current = this, this.windowMouseMoveWrapper = this.windowMouseMoveWrapper.bind(this), this.windowTouchWrapper = this.windowTouchWrapper.bind(this), this.windowGyroWrapper = this.windowGyroWrapper.bind(this), this.resize = this.resize.bind(this), this.animationLoop = this.animationLoop.bind(this), this.restart = this.restart.bind(this);
          const t2 = "function" == typeof this.getDefaultOptions ? this.getDefaultOptions() : this.defaultOptions;
          if (this.options = Object.assign({ mouseControls: true, touchControls: true, gyroControls: false, minHeight: 200, minWidth: 200, scale: 1, scaleMobile: 1 }, t2), (e2 instanceof HTMLElement || "string" == typeof e2) && (e2 = { el: e2 }), Object.assign(this.options, e2), this.options.THREE && (s = this.options.THREE), this.el = this.options.el, null == this.el) r('Instance needs "el" param!');
          else if (!(this.options.el instanceof HTMLElement)) {
            const e3 = this.el;
            if (this.el = (i2 = e3, document.querySelector(i2)), !this.el) return void r("Cannot find element", e3);
          }
          var i2, h2;
          this.prepareEl(), this.initThree(), this.setSize();
          try {
            this.init();
          } catch (e3) {
            return r("Init error", e3), this.renderer && this.renderer.domElement && this.el.removeChild(this.renderer.domElement), void (this.options.backgroundColor && (console.log("[VANTA] Falling back to backgroundColor"), this.el.style.background = (h2 = this.options.backgroundColor, "number" == typeof h2 ? "#" + ("00000" + h2.toString(16)).slice(-6) : h2)));
          }
          this.initMouse(), this.resize(), this.animationLoop();
          const a2 = window.addEventListener;
          a2("resize", this.resize), window.requestAnimationFrame(this.resize), this.options.mouseControls && (a2("scroll", this.windowMouseMoveWrapper), a2("mousemove", this.windowMouseMoveWrapper)), this.options.touchControls && (a2("touchstart", this.windowTouchWrapper), a2("touchmove", this.windowTouchWrapper)), this.options.gyroControls && a2("deviceorientation", this.windowGyroWrapper);
        }
        setOptions(e2 = {}) {
          Object.assign(this.options, e2), this.triggerMouseMove();
        }
        prepareEl() {
          let e2, t2;
          if ("undefined" != typeof Node && Node.TEXT_NODE) for (e2 = 0; e2 < this.el.childNodes.length; e2++) {
            const t3 = this.el.childNodes[e2];
            if (t3.nodeType === Node.TEXT_NODE) {
              const e3 = document.createElement("span");
              e3.textContent = t3.textContent, t3.parentElement.insertBefore(e3, t3), t3.remove();
            }
          }
          for (e2 = 0; e2 < this.el.children.length; e2++) t2 = this.el.children[e2], "static" === getComputedStyle(t2).position && (t2.style.position = "relative"), "auto" === getComputedStyle(t2).zIndex && (t2.style.zIndex = 1);
          "static" === getComputedStyle(this.el).position && (this.el.style.position = "relative");
        }
        applyCanvasStyles(e2, t2 = {}) {
          Object.assign(e2.style, { position: "absolute", zIndex: 0, top: 0, left: 0, background: "" }), Object.assign(e2.style, t2), e2.classList.add("vanta-canvas");
        }
        initThree() {
          s.WebGLRenderer ? (this.renderer = new s.WebGLRenderer({ alpha: true, antialias: true }), this.el.appendChild(this.renderer.domElement), this.applyCanvasStyles(this.renderer.domElement), isNaN(this.options.backgroundAlpha) && (this.options.backgroundAlpha = 1), this.scene = new s.Scene()) : console.warn("[VANTA] No THREE defined on window");
        }
        getCanvasElement() {
          return this.renderer ? this.renderer.domElement : this.p5renderer ? this.p5renderer.canvas : void 0;
        }
        getCanvasRect() {
          const e2 = this.getCanvasElement();
          return !!e2 && e2.getBoundingClientRect();
        }
        windowMouseMoveWrapper(e2) {
          const t2 = this.getCanvasRect();
          if (!t2) return false;
          const i2 = e2.clientX - t2.left, o2 = e2.clientY - t2.top;
          i2 >= 0 && o2 >= 0 && i2 <= t2.width && o2 <= t2.height && (this.mouseX = i2, this.mouseY = o2, this.options.mouseEase || this.triggerMouseMove(i2, o2));
        }
        windowTouchWrapper(e2) {
          const t2 = this.getCanvasRect();
          if (!t2) return false;
          if (1 === e2.touches.length) {
            const i2 = e2.touches[0].clientX - t2.left, o2 = e2.touches[0].clientY - t2.top;
            i2 >= 0 && o2 >= 0 && i2 <= t2.width && o2 <= t2.height && (this.mouseX = i2, this.mouseY = o2, this.options.mouseEase || this.triggerMouseMove(i2, o2));
          }
        }
        windowGyroWrapper(e2) {
          const t2 = this.getCanvasRect();
          if (!t2) return false;
          const i2 = Math.round(2 * e2.alpha) - t2.left, o2 = Math.round(2 * e2.beta) - t2.top;
          i2 >= 0 && o2 >= 0 && i2 <= t2.width && o2 <= t2.height && (this.mouseX = i2, this.mouseY = o2, this.options.mouseEase || this.triggerMouseMove(i2, o2));
        }
        triggerMouseMove(e2, t2) {
          void 0 === e2 && void 0 === t2 && (this.options.mouseEase ? (e2 = this.mouseEaseX, t2 = this.mouseEaseY) : (e2 = this.mouseX, t2 = this.mouseY)), this.uniforms && (this.uniforms.iMouse.value.x = e2 / this.scale, this.uniforms.iMouse.value.y = t2 / this.scale);
          const i2 = e2 / this.width, o2 = t2 / this.height;
          "function" == typeof this.onMouseMove && this.onMouseMove(i2, o2);
        }
        setSize() {
          this.scale || (this.scale = 1), "undefined" != typeof navigator && (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth < 600) && this.options.scaleMobile ? this.scale = this.options.scaleMobile : this.options.scale && (this.scale = this.options.scale), this.width = Math.max(this.el.offsetWidth, this.options.minWidth), this.height = Math.max(this.el.offsetHeight, this.options.minHeight);
        }
        initMouse() {
          (!this.mouseX && !this.mouseY || this.mouseX === this.options.minWidth / 2 && this.mouseY === this.options.minHeight / 2) && (this.mouseX = this.width / 2, this.mouseY = this.height / 2, this.triggerMouseMove(this.mouseX, this.mouseY));
        }
        resize() {
          this.setSize(), this.camera && (this.camera.aspect = this.width / this.height, "function" == typeof this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix()), this.renderer && (this.renderer.setSize(this.width, this.height), this.renderer.setPixelRatio(window.devicePixelRatio / this.scale)), "function" == typeof this.onResize && this.onResize();
        }
        isOnScreen() {
          const e2 = this.el.offsetHeight, t2 = this.el.getBoundingClientRect(), i2 = window.pageYOffset || (document.documentElement || document.body.parentNode || document.body).scrollTop, o2 = t2.top + i2;
          return o2 - window.innerHeight <= i2 && i2 <= o2 + e2;
        }
        animationLoop() {
          this.t || (this.t = 0), this.t2 || (this.t2 = 0);
          const e2 = performance.now();
          if (this.prevNow) {
            let t2 = (e2 - this.prevNow) / (1e3 / 60);
            t2 = Math.max(0.2, Math.min(t2, 5)), this.t += t2, this.t2 += (this.options.speed || 1) * t2, this.uniforms && (this.uniforms.iTime.value = 0.016667 * this.t2);
          }
          return this.prevNow = e2, this.options.mouseEase && (this.mouseEaseX = this.mouseEaseX || this.mouseX || 0, this.mouseEaseY = this.mouseEaseY || this.mouseY || 0, Math.abs(this.mouseEaseX - this.mouseX) + Math.abs(this.mouseEaseY - this.mouseY) > 0.1 && (this.mouseEaseX += 0.05 * (this.mouseX - this.mouseEaseX), this.mouseEaseY += 0.05 * (this.mouseY - this.mouseEaseY), this.triggerMouseMove(this.mouseEaseX, this.mouseEaseY))), (this.isOnScreen() || this.options.forceAnimate) && ("function" == typeof this.onUpdate && this.onUpdate(), this.scene && this.camera && (this.renderer.render(this.scene, this.camera), this.renderer.setClearColor(this.options.backgroundColor, this.options.backgroundAlpha)), this.fps && this.fps.update && this.fps.update(), "function" == typeof this.afterRender && this.afterRender()), this.req = window.requestAnimationFrame(this.animationLoop);
        }
        restart() {
          if (this.scene) for (; this.scene.children.length; ) this.scene.remove(this.scene.children[0]);
          "function" == typeof this.onRestart && this.onRestart(), this.init();
        }
        init() {
          "function" == typeof this.onInit && this.onInit();
        }
        destroy() {
          "function" == typeof this.onDestroy && this.onDestroy();
          const e2 = window.removeEventListener;
          e2("touchstart", this.windowTouchWrapper), e2("touchmove", this.windowTouchWrapper), e2("scroll", this.windowMouseMoveWrapper), e2("mousemove", this.windowMouseMoveWrapper), e2("deviceorientation", this.windowGyroWrapper), e2("resize", this.resize), window.cancelAnimationFrame(this.req);
          const t2 = this.scene;
          t2 && t2.children && i(t2), this.renderer && (this.renderer.domElement && this.el.removeChild(this.renderer.domElement), this.renderer = null, this.scene = null), n.current === this && (n.current = null);
        }
      };
      const h = n.VantaBase;
      let a = "object" == typeof window && window.THREE;
      class l extends h {
        constructor(e2) {
          a = e2.THREE || a, a.Color.prototype.toVector = function() {
            return new a.Vector3(this.r, this.g, this.b);
          }, super(e2), this.updateUniforms = this.updateUniforms.bind(this);
        }
        init() {
          this.mode = "shader", this.uniforms = { iTime: { type: "f", value: 1 }, iResolution: { type: "v2", value: new a.Vector2(1, 1) }, iDpr: { type: "f", value: window.devicePixelRatio || 1 }, iMouse: { type: "v2", value: new a.Vector2(this.mouseX || 0, this.mouseY || 0) } }, super.init(), this.fragmentShader && this.initBasicShader();
        }
        setOptions(e2) {
          super.setOptions(e2), this.updateUniforms();
        }
        initBasicShader(e2 = this.fragmentShader, t2 = this.vertexShader) {
          t2 || (t2 = "uniform float uTime;\nuniform vec2 uResolution;\nvoid main() {\n  gl_Position = vec4( position, 1.0 );\n}"), this.updateUniforms(), "function" == typeof this.valuesChanger && this.valuesChanger();
          const i2 = new a.ShaderMaterial({ uniforms: this.uniforms, vertexShader: t2, fragmentShader: e2 }), o2 = this.options.texturePath;
          o2 && (this.uniforms.iTex = { type: "t", value: new a.TextureLoader().load(o2) });
          const s2 = new a.Mesh(new a.PlaneGeometry(2, 2), i2);
          this.scene.add(s2), this.camera = new a.Camera(), this.camera.position.z = 1;
        }
        updateUniforms() {
          const e2 = {};
          let t2, i2;
          for (t2 in this.options) i2 = this.options[t2], -1 !== t2.toLowerCase().indexOf("color") ? e2[t2] = { type: "v3", value: new a.Color(i2).toVector() } : "number" == typeof i2 && (e2[t2] = { type: "f", value: i2 });
          return Object.assign(this.uniforms, e2);
        }
        resize() {
          super.resize(), this.uniforms.iResolution.value.x = this.width / this.scale, this.uniforms.iResolution.value.y = this.height / this.scale;
        }
      }
      class c extends l {
      }
      const u = n.register("FOG", c);
      return c.prototype.defaultOptions = { highlightColor: 16761600, midtoneColor: 16719616, lowlightColor: 2949375, baseColor: 16772075, blurFactor: 0.6, speed: 1, zoom: 1, scale: 2, scaleMobile: 4 }, c.prototype.fragmentShader = "uniform vec2 iResolution;\nuniform vec2 iMouse;\nuniform float iTime;\n\nuniform float blurFactor;\nuniform vec3 baseColor;\nuniform vec3 lowlightColor;\nuniform vec3 midtoneColor;\nuniform vec3 highlightColor;\nuniform float zoom;\n\nfloat random (in vec2 _st) {\n  return fract(sin(dot(_st.xy,\n                     vec2(0.129898,0.78233)))*\n        437.585453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 _st) {\n  vec2 i = floor(_st);\n  vec2 f = fract(_st);\n\n  // Four corners in 2D of a tile\n  float a = random(i);\n  float b = random(i + vec2(1.0, 0.0));\n  float c = random(i + vec2(0.0, 1.0));\n  float d = random(i + vec2(1.0, 1.0));\n\n  vec2 u = f * f * (3.0 - 2.0 * f);\n\n  return mix(a, b, u.x) +\n          (c - a)* u.y * (1.0 - u.x) +\n          (d - b) * u.x * u.y;\n}\n\n#define NUM_OCTAVES 6\n\nfloat fbm ( in vec2 _st) {\n  float v = 0.0;\n  float a = blurFactor;\n  vec2 shift = vec2(100.0);\n  // Rotate to reduce axial bias\n  mat2 rot = mat2(cos(0.5), sin(0.5),\n                  -sin(0.5), cos(0.50));\n  for (int i = 0; i < NUM_OCTAVES; ++i) {\n      v += a * noise(_st);\n      _st = rot * _st * 2.0 + shift;\n      a *= (1. - blurFactor);\n  }\n  return v;\n}\n\nvoid main() {\n  vec2 st = gl_FragCoord.xy / iResolution.xy*3.;\n  st.x *= 0.7 * iResolution.x / iResolution.y ; // Still keep it more landscape than square\n  st *= zoom;\n\n  // st += st * abs(sin(iTime*0.1)*3.0);\n  vec3 color = vec3(0.0);\n\n  vec2 q = vec2(0.);\n  q.x = fbm( st + 0.00*iTime);\n  q.y = fbm( st + vec2(1.0));\n\n  vec2 dir = vec2(0.15,0.126);\n  vec2 r = vec2(0.);\n  r.x = fbm( st + 1.0*q + vec2(1.7,9.2)+ dir.x*iTime );\n  r.y = fbm( st + 1.0*q + vec2(8.3,2.8)+ dir.y*iTime);\n\n  float f = fbm(st+r);\n\n  color = mix(baseColor,\n              lowlightColor,\n              clamp((f*f)*4.0,0.0,1.0));\n\n  color = mix(color,\n              midtoneColor,\n              clamp(length(q),0.0,1.0));\n\n  color = mix(color,\n              highlightColor,\n              clamp(length(r.x),0.0,1.0));\n\n  vec3 finalColor = mix(baseColor, color, f*f*f+.6*f*f+.5*f);\n  gl_FragColor = vec4(finalColor,1.0);\n}\n", t;
    })());
  }
});
export default require_vanta_fog_min();
//# sourceMappingURL=vanta_dist_vanta__fog__min.js.map
